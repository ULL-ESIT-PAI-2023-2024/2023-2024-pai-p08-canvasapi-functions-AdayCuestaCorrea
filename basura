### Representación de funciones
El objetivo de esta práctica es el desarrollo de una aplicación que permita la visualización en una página web
de la representación gráfica de una función.


Previo al desarrollo de la aplicación, realice un diseño de la misma identificando las diferentes clases que
intervienen en el programa.
Utilice alguna aplicación que conozca para dibujar un diagrama UML de las clases que intervienen.

La visualización de la ejecución del programa se realizará a través de una página web alojada
en la máquina IaaS-ULL de la asignatura y cuya URL tendrá la forma:

[1] `http://10.6.129.123:8080/einstein-albert-quick-hull.html`

en la que se embeberá un lienzo (canvas) para dibujar el conjunto de puntos y su polígono envolvente.
Sustituya *Albert Einstein* por su nombre y apellido en la URL de su página
 la dirección IP anterior por la correspondiente a su máquina IaaS.

La web [1] mostrará un lienzo (canvas) que ocupe la mayor parte de una pantalla de ordenador de resolución usual.

No es necesario que invierta esfuerzo en la programación de los aspectos de esa página que no tienen relación
con TypeScript. 
Tanto HTML como CSS son aspectos que se estudiarán con cierto nivel de detalle en el futuro. 
No se requiere que dedique esfuerzo a esos aspectos en esta práctica.
Tampoco se propone en esta práctica que utilice elementos interactivos (botones, campos de texto, selectores,
etc.).

Diseñe asimismo otra página HTML simple 

[2] `http://10.6.129.123:8080/index.html`

que sirva de "página índice" para los ejercicios de la sesión de evaluación de la práctica.
La página [1] será uno de los enlaces de [2] y a su vez [1] tendrá un enlace "Home" que apunte a [2].
Enlace también en la página índice [2] la página que contiene la documentación de su proyecto, generada con
Typedoc.

Incluya una tercera página
[3] `http://10.6.129.123:8080/uml.html`
que muestre el diagrama UML de las clases que intervienen en su programa.

Las siguientes deben tomarse como especificaciones adicionales de la aplicación a desarrollar:

* El número de puntos que el programa genera de forma aleatoria para calcular su
  envolvente, es un parámetro del programa que se introduce en una ventana similar a la que
	utiliza el programa de ejemplo que calcula de forma aproximada el valor del número Pi.
* Dado que la QuickHull es un algoritmo que se define de forma natural recursivamente, se admitirá cualquier tipo de solución, 
  tanto recursiva como iterativa. 
  Obviamente la solución recursiva es la primera que han de intentar porque será más sencilla de abordar que una alternativa iterativa.  
* El programa deberá dibujar línea a línea cada uno de los pasos que sigue el algoritmo en la evolución
  del cómputo de la envolvente, de forma similar a como lo hace la simulación anterior, que se tomará como
  referencia.
* El programa dejará transcurrir un cierto intervalo de tiempo entre el dibujo de una línea y la siguiente
  en la evolución del algoritmo, de forma también análoga a como ocurre en la simulación previa.

